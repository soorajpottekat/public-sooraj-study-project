package xxx.gamedev.screens;

import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Window;

import javax.swing.JFrame;

public class ScreenManager
{
	private GraphicsDevice device;

	/**
	 * Creates a new SimpleScreenManager object.
	 */
	public ScreenManager()
	{
		GraphicsEnvironment environment = GraphicsEnvironment
				.getLocalGraphicsEnvironment();
		device = environment.getDefaultScreenDevice();
	}

	/**
	 * Returns a list of compatible display modes for the default device on the
	 * system.
	 */
	public DisplayMode[] getCompatibleDisplayModes()
	{
		return device.getDisplayModes();
	}
	
	/**
	 * Returns the first compatible mode in a list of modes. Returns null if no
	 * modes are compatible.
	 */
	public DisplayMode findFirstCompatibleMode(DisplayMode modes[])
	{
		DisplayMode goodModes[] = device.getDisplayModes();
		for (int i = 0; i < modes.length; i++)
		{
			for (int j = 0; j < goodModes.length; j++)
			{
				if (displayModesMatch(modes[i], goodModes[j]))
				{
					return modes[i];
				}
			}
		}
		return null;
	}
	/**
	 * Enters full screen mode and changes the display mode.
	 */
	public void setFullScreen(DisplayMode displayMode, JFrame window)
	{
		window.setUndecorated(true);
		window.setResizable(false);

		device.setFullScreenWindow(window);
		if (displayMode != null && device.isDisplayChangeSupported())
		{
			try
			{
				device.setDisplayMode(displayMode);
			}
			catch (IllegalArgumentException ex)
			{
				// ignore - illegal mode for this device
			}
		}
	}

	/**
	 * Returns the window currently used in full screen mode.
	 */
	public Window getFullScreenWindow()
	{
		return device.getFullScreenWindow();
	}

	/**
	 * Restores the screen's display mode.
	 */
	public void restoreScreen()
	{
		Window window = device.getFullScreenWindow();
		if (window != null)
		{
			window.dispose();
		}
		device.setFullScreenWindow(null);
	}

}
