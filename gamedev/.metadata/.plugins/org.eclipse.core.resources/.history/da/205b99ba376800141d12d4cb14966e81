package xxx.gamedev.engine.Input;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Robot;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;

import javax.swing.SwingUtilities;

import xxx.gamedev.engine.core.GameCore;

public class MouseLookTest extends GameCore implements MouseMotionListener, KeyListener
{
    private Image bgImage;
    private Robot robot;
    private Point mouseLocation;
    private Point centerLocation;
    private Point imageLocation;
    private boolean relativeMouseMode;
    private boolean isRecentering;
	public static void main(String[] args)
	{
		new MouseLookTest().run();
	}
	@Override
	public void init()
	{
		// TODO Auto-generated method stub
		super.init();
		mouseLocation = new Point();
		centerLocation =  new Point();
		imageLocation = new Point();
		relativeMouseMode = true;
		isRecentering = false;
		try
		{
			robot = new Robot();
			reCenterMouse();
			mouseLocation.x = centerLocation.x;
			mouseLocation.y = centerLocation.y;
			
		}
		catch (Exception e)
		{
			System.out
					.println("[Sooraj] ---- xxx.gamedev.engine.Input : init ---- [Sooraj]");
			System.out.println("[Sooraj] ---- could not create mouse---- [Sooraj]");
		}
		Window window = screen.getFullScreenWindow();
		window.addMouseMotionListener(this);
		window.addKeyListener(this);
		bgImage = loadImage("resources/background.jpg");
		
	}
	private void reCenterMouse()
	{
		Window window = screen.getFullScreenWindow();
		if(robot != null && window.isShowing() )
		{
			centerLocation.x = screen.getWidth() / 2;
			centerLocation.y = screen.getHeight() / 2;
			SwingUtilities.convertPointToScreen(centerLocation, window);
			isRecentering = true;
			robot.mouseMove(centerLocation.x, centerLocation.y);
		}
	}
	@Override
	public void keyPressed(KeyEvent e)
	{
		if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
		{
			stop();
		}
		else if(e.getKeyCode() == KeyEvent.VK_SPACE)
		{
			relativeMouseMode = !relativeMouseMode;
		}
	}

	@Override
	public void keyReleased(KeyEvent arg0)
	{
		// nothing 
		
	}

	@Override
	public void keyTyped(KeyEvent arg0)
	{
		// nohing
		
	}

	@Override
	public void mouseDragged(MouseEvent arg0)
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseMoved(MouseEvent e)
	{
		if(isRecentering && centerLocation.x ==  e.getX() && centerLocation.y == e.getY())
		{
			isRecentering = false;
		}
		else
		{
			int dx = e.getX() - mouseLocation.x;
			int dy = e.getY() - mouseLocation.y;
			imageLocation.x += dx;
			imageLocation.y += dy;
			if(relativeMouseMode)
			{
				reCenterMouse();
			}
		}
		mouseLocation.x = e.getX();
		mouseLocation.y = e.getY();
	}

	@Override
	public void draw(Graphics2D g)
	{
		int w = screen.getWidth();
		int h = screen.getHeight();
		imageLocation.x %= w;
		imageLocation.y %= h;
		if(imageLocation.x < 0)
		{
			imageLocation.x += w; 
		}
		if(imageLocation.y < 0)
		{
			imageLocation.y +=h;
		}
		int x =imageLocation.x;
		int y = imageLocation.y;
		
		g.drawImage(bgImage,x,y,null);
		g.drawImage(bgImage,x-w,y,null);
		g.drawImage(bgImage,x,y-h,null);
		g.drawImage(bgImage,x-w,y-w,null);
		
		g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
		
		g.drawString("Press Space to change mouse modes", 5, FONT_SIZE);
		g.drawString("Press escape to exit", 5, 2*FONT_SIZE);
		
	}

}
